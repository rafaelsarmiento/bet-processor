package com.sportradar.bet_processor.service.impl;

import java.math.BigDecimal;
import java.util.Optional;
import java.util.concurrent.RejectedExecutionException;

import org.springframework.stereotype.Service;

import com.sportradar.bet_processor.domain.Bet;
import com.sportradar.bet_processor.service.BetProcessorAccumService;
import com.sportradar.bet_processor.service.BetProcessorService;
import com.sportradar.bet_processor.service.BetResultService;

/**
 * Implementation using several workers to reduce the potential load generated by many bets.
 *
 */
@Service
public class MultipleWorkersBetProcessorAccumServiceImpl implements BetProcessorAccumService {
	
	private final BetProcessorService betProcessorService;	
	private final BetResultService betResultService;
	private boolean shuttingDown;

	public MultipleWorkersBetProcessorAccumServiceImpl(BetProcessorService betProcessorService, BetResultService betResultService) {
		this.betProcessorService = betProcessorService;
		this.betResultService = betResultService;
		this.shuttingDown = false;
	}

	@Override
	public void addBet(Bet bet) {
		if (shuttingDown) {
			throw new RejectedExecutionException("The system is already shutting-down");
		}
		
		validate(bet);
		
		processBet(bet);		
	}

	@Override
	public void shutdown() {
		this.shuttingDown = true;
	}

	private static void validate(Bet bet) {
		if (bet == null) {
			throw new IllegalArgumentException("Bet is null");
		} else if (bet.client() == null || "".equals(bet.client().trim())) {
			throw new IllegalArgumentException("Client is null or empty");
		} else if (bet.status() == null) {
			throw new IllegalArgumentException("Status is null");
		} else if (bet.amount() <= 0) {
			throw new IllegalArgumentException("Amount is equal or lower than zero");
		} else if (bet.odds() <= 0 || bet.odds() >= 1) {
			throw new IllegalArgumentException("Odds are equal or lower than zero or greater or equal than 1");
		}
	}
	
	private void processBet(Bet bet) {
		betProcessorService.processBet(bet)
			.exceptionally(exception -> handleProcessingException(bet, exception))
			.thenAccept(resultOp -> handleProcessingResult(bet, resultOp));
	}
	
	private Optional<BigDecimal> handleProcessingException(Bet bet, Throwable exception) {
		betResultService.processException(bet, exception);
		return Optional.empty();
	}
	
	private void handleProcessingResult(Bet bet, Optional<BigDecimal> resultOp) {
		resultOp.ifPresent(result -> betResultService.processBetResult(bet, result));
	}
}
