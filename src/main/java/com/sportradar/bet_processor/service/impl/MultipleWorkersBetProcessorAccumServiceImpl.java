package com.sportradar.bet_processor.service.impl;

import java.util.Optional;
import java.util.concurrent.RejectedExecutionException;

import org.springframework.beans.BeansException;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Service;

import com.sportradar.bet_processor.domain.Bet;
import com.sportradar.bet_processor.service.BetProcessorAccumService;
import com.sportradar.bet_processor.service.BetProcessorService;
import com.sportradar.bet_processor.service.BetResultService;

/**
 * Implementation using several workers to reduce the potential load generated by many bets.
 *
 */
@Service
public class MultipleWorkersBetProcessorAccumServiceImpl implements BetProcessorAccumService, ApplicationContextAware {
	
	private final BetProcessorService betProcessorService;	
	private final BetResultService betResultService;
	private boolean shuttingDown;
	private ApplicationContext applicationContext;

	public MultipleWorkersBetProcessorAccumServiceImpl(BetProcessorService betProcessorService, BetResultService betResultService) {
		this.betProcessorService = betProcessorService;
		this.betResultService = betResultService;
		this.shuttingDown = false;
	}

	@Override
	public void addBet(Bet bet) {
		if (shuttingDown) {
			throw new RejectedExecutionException("The system is already shutting-down");
		}
		
		validate(bet);
		
		betProcessorService.processBet(bet)
			.exceptionally(exception -> {
				betResultService.processException(bet, exception);
				return Optional.empty();
			})
			.thenAccept(resultOp -> resultOp.ifPresent(result -> betResultService.processBetResult(bet, result)));
	}

	@Override
	public void shutdown() {
		if (applicationContext != null) {
			this.shuttingDown = true;
			SpringApplication.exit(applicationContext);
		} else {
			throw new IllegalArgumentException("The system is starting-up yet");
		}
	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}

	private void validate(Bet bet) {
		if (bet == null) {
			throw new IllegalArgumentException("Bet is null");
		} else if (bet.client() == null || "".equals(bet.client().trim())) {
			throw new IllegalArgumentException("Client is null or empty");
		} else if (bet.status() == null) {
			throw new IllegalArgumentException("Status is null");
		}
	}
}
